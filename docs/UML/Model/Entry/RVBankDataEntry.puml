@startuml
interface IRVBankDataEntry {
    StreamOffset : long <<get>>
    EntryData : MemoryStream <<get>> <<set>>
    PackingMethod : RVBankDataType <<get>> <<set>>
    ExpandDirectoryStructure() : void
    InitializeStreamOffset(offset:long) : void
    InitializeBuffer(reader:BisBinaryReader, options:RVBankOptions) : bool
    RetrieveRawBuffer(reader:BisBinaryReader, options:RVBankOptions) : byte[]
    + RetrieveBuffer(reader:BisBinaryReader, options:RVBankOptions) : byte[]?
}
class RVBankDataEntry {
    - disposed : bool
    - packingMethod : RVBankDataType
    + StreamOffset : long <<get>> <<protected set>>
    - entryData : MemoryStream
    + EntryData : MemoryStream <<get>> <<set>>
    + PackingMethod : RVBankDataType <<get>> <<set>>
    - AssumePackingMethod() : RVBankDataType
    + RVBankDataEntry(reader:BisBinaryReader, options:RVBankOptions, file:IRVBank, parent:IRVBankDirectory, logger:ILogger?)
    + ExpandDirectoryStructure() : void
    + InitializeStreamOffset(offset:long) : void
    + InitializeBuffer(reader:BisBinaryReader, options:RVBankOptions) : bool
    + RetrieveRawBuffer(reader:BisBinaryReader, options:RVBankOptions) : byte[]
    + <<virtual>> RetrieveBuffer(reader:BisBinaryReader, options:RVBankOptions) : byte[]?
    + <<sealed>> <<override>> Binarize(writer:BisBinaryWriter, options:RVBankOptions) : Result
    + <<sealed>> <<override>> Debinarize(reader:BisBinaryReader, options:RVBankOptions) : Result
    + <<sealed>> <<override>> Validate(options:RVBankOptions) : Result
    + <<sealed>> <<override>> CalculateHeaderLength(options:RVBankOptions) : int
    + Dispose() : void
}
IRVBankEntry <|-- IRVBankDataEntry
RVBankEntry <|-- RVBankDataEntry
IRVBankDataEntry <|-- RVBankDataEntry
IDisposable <|-- RVBankDataEntry
@enduml
